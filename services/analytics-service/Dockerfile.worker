# Analytics Worker Dockerfile
# Background processing for analytics aggregation and report generation

# Development stage
FROM node:18-alpine AS development
WORKDIR /app

# Install system dependencies for report generation
RUN apk add --no-cache \
    curl \
    python3 \
    make \
    g++ \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    musl-dev \
    giflib-dev \
    pixman-dev \
    pangomm-dev \
    libjpeg-turbo-dev \
    freetype-dev

COPY package*.json ./
RUN npm ci

COPY . .

# Create reports directory
RUN mkdir -p /app/reports /tmp/analytics

EXPOSE 3008
CMD ["npm", "run", "worker:dev"]

# Build stage
FROM node:18-alpine AS build
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    musl-dev \
    giflib-dev \
    pixman-dev \
    pangomm-dev \
    libjpeg-turbo-dev \
    freetype-dev

COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

COPY . .
RUN npm run build

# Production stage
FROM node:18-alpine AS production
WORKDIR /app

# Install runtime dependencies for report generation
RUN apk add --no-cache \
    curl \
    cairo \
    jpeg \
    pango \
    musl \
    giflib \
    pixman \
    pangomm \
    libjpeg-turbo \
    freetype \
    ttf-dejavu

# Copy built application
COPY --from=build /app/node_modules ./node_modules
COPY --from=build /app/dist ./dist
COPY --from=build /app/package*.json ./

# Create necessary directories
RUN mkdir -p /app/reports /tmp/analytics

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S analytics -u 1001 -G nodejs

# Set ownership
RUN chown -R analytics:nodejs /app /tmp/analytics
USER analytics

EXPOSE 3008

# Health check
HEALTHCHECK --interval=60s --timeout=15s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:3008/health || exit 1

CMD ["npm", "run", "worker:start"]
