# Service Template - Copy this file to your service directory and customize
# Replace 'service-name' with your actual service name
# Replace 'SERVICE_NAME' with your service name in uppercase
# Replace '3001' with your service's port number

version: '3.8'

services:
  service-name:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    image: lms/service-name:${VERSION:-latest}
    container_name: lms-service-name
    environment:
      # Basic configuration
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3001
      - LOG_LEVEL=${LOG_LEVEL:-info}
      
      # Database connections (customize based on your service needs)
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgresql:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis-master:6379/0
      
      # Event streaming (if your service uses Kafka)
      - KAFKA_BROKERS=${KAFKA_BROKERS:-kafka-1:9092,kafka-2:9092,kafka-3:9092}
      - KAFKA_CLIENT_ID=service-name
      - KAFKA_GROUP_ID=service-name-group
      
      # Service-to-service communication URLs
      - USER_SERVICE_URL=http://user-service:3001
      - COURSE_SERVICE_URL=http://course-service:3002
      - AUTH_SERVICE_URL=http://auth-service:3003
      - FILE_SERVICE_URL=http://file-service:3004
      - SEARCH_SERVICE_URL=http://search-service:3005
      - NOTIFICATION_SERVICE_URL=http://notification-service:3006
      - ANALYTICS_SERVICE_URL=http://analytics-service:3007
      
      # Service-specific configuration
      # Add your service-specific environment variables here
      # - SERVICE_SPECIFIC_CONFIG=${SERVICE_SPECIFIC_CONFIG}
      
      # Monitoring and observability
      - PROMETHEUS_ENDPOINT=http://prometheus:9090
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    
    # Dependencies (customize based on what your service needs)
    depends_on:
      - postgresql
      - redis-master
      # - kafka-1  # Uncomment if your service uses Kafka
      # - elasticsearch  # Uncomment if your service uses Elasticsearch
      # - mongodb  # Uncomment if your service uses MongoDB
    
    # Networks
    networks:
      - lms-internal  # All services should be on internal network
      # - lms-network  # Only add this if service needs external access (like API Gateway)
    
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Labels for monitoring and service discovery
    labels:
      - "lms.service.type=application"
      - "lms.service.name=service-name"
      - "lms.service.description=Brief description of what this service does"
      - "lms.service.version=${VERSION:-latest}"
      - "lms.service.port=3001"

# If your service needs additional containers (like workers, cron jobs, etc.)
# you can add them here:
#
# service-name-worker:
#   build:
#     context: .
#     dockerfile: Dockerfile.worker
#   image: lms/service-name-worker:${VERSION:-latest}
#   container_name: lms-service-name-worker
#   environment:
#     - NODE_ENV=${NODE_ENV:-production}
#     - LOG_LEVEL=${LOG_LEVEL:-info}
#   depends_on:
#     - service-name
#   networks:
#     - lms-internal
#   restart: unless-stopped
#   labels:
#     - "lms.service.type=worker"
#     - "lms.service.name=service-name-worker"
